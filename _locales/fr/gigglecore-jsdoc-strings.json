{
  "gigglebot": "Un petit robot rigolo",
  "gigglebot.distanceSensorReadRangeContinuous": "Obtenir une lecture indiquant à quelle distance se trouve un obstacle.",
  "gigglebot.distanceSensorReadRangeSingle": "Capteur de distance: lecture unique.",
  "gigglebot.distanceSensorTestForObstacle": "Tester la présence d'un obstacle",
  "gigglebot.driveMillisec": "Le gigglebot avancera ou reculera pendant un certain nombre de millisecondes.\nLa distance parcourue pendant ce temps dépend de la charge des batteries.",
  "gigglebot.driveStraight": "Le gigglebot avancera ou reculera jusqu'à ordre contraire, soit un bloc d'arrêt ou de tournant.",
  "gigglebot.gigglebotSpin": "Le gigglebot pivotera sur lui-même jusqu'à ordre contraire, en restant approximativement sur place. Ce bloc est utile pour dessiner.",
  "gigglebot.gigglebotSpinMillisec": "Le gigglebot pivotera sur lui-même pendant un certain nombre de milliseconds, utile pour dessiner.",
  "gigglebot.lightFollow": "Le gigglebot suivra la lumière d'une lampe de poche.",
  "gigglebot.lightReadSensor": "Lecture du capteur de lumière gauche ou droit. \nLes capteurs de lumière sont minuscules et se trouvent juste en avant des lumières pour les yeux. \nLes valeurs possibles vont de 0 à 1023, bien qu'en réalité elles seront rarement plus élevées que ~950.",
  "gigglebot.lineFollow": "Une ligne mince est plus étroite que l'espace entre les deux capteurs de ligne. Le gigglebot arrêtera lorsque les deux capteurs détecteront du noir.\nUne ligne large est suffisamment large pour que les deux capteurs soient au-dessus de la ligne en même temps. Le gigglebot arrêtera lorsque les deux capteurs détecteront du blanc.",
  "gigglebot.lineReadSensor": "Lecture du capteur de ligne de gauche ou de droite",
  "gigglebot.lineSensorsRaw": "Lecture des deux capteurs de ligne",
  "gigglebot.lineTest": "Permet de vérifier les capteurs de ligne. Les deux doivent lire soit noir soit blanc, en même temps.",
  "gigglebot.onRemoteControl": "Ce bloc permet de contrôler le gigglebot à l'aide d'un deuxième microbit.",
  "gigglebot.onRemoteControl|param|radioBlock": "eg:1",
  "gigglebot.remoteControl": "Ce bloc permet d'utiliser un deuxième microbit comme contrôle à distance.\nLa méthode la plus simple est de mettre ce bloc dans une boucle \"Toujours\".\nLe gigglebot lui-même doit aussi être mis en mode de contrôle à didstance.",
  "gigglebot.remoteControlAction": "@param",
  "gigglebot.remoteControl|param|radioBlock": "eg: 1",
  "gigglebot.setSpeed": "You can set the speed for each individual motor or both together. The higher the speed the less control the robot has.\nYou may need to correct the robot (see block in \"more...\" section).  A faster robot needs more correction than a slower one.\nIf you want to follow a line,  it will work best at a lower speed.\nActual speed is dependent on the freshness of the batteries.",
  "gigglebot.steer": "Gigglebot will drive forward while steering to one side. \nUseful when it needs to go around an obstacle, or orbit around an object.\n0% means no steering, the same as the 'drive' block. 100% is the same as the 'turn' block.",
  "gigglebot.steerMillisec": "Gigglebot will drive forward while steering to one side for the provided number of milliseconds. \nUseful when it needs to go around an obstacle, or orbit around an object.\n0% means no steering, the same as the 'drive' block. 100% is the same as the 'turn' block.",
  "gigglebot.stop": "stops the robot.",
  "gigglebot.turn": "Will make gigglebot turn left or right until told otherwise (by a stop block or a drive block).",
  "gigglebot.turnMillisec": "Will make gigglebot turn left and right for a number of milliseconds. How far it turns depends on the freshness of the batteries.",
  "gigglebot.voltageShow": "Displays the current battery voltage. Anything lower than 3.4 is too low to run the motors",
  "gigglebot.whichEye": "Lets you ur lse the blocks in the neopixel category for better control over the eyes.",
  "gigglebotWhichUniqueMotor": "Use this file to define custom functions and blocks.\nRead more at https://makecode.microbit.org/blocks/custom"
}
