{
  "gigglebot": "Custom blocks",
  "gigglebot.distanceSensorReadRangeContinuous": "Get a reading of how far an obstacle is from the distanse sensor.",
  "gigglebot.distanceSensorReadRangeSingle": "Distance Sensor: takes a single reading.",
  "gigglebot.distanceSensorTestForObstacle": "Test for the presence of an obstacle.",
  "gigglebot.distanceSensorTestForObstacle|param|dist": "how many millimeters; eg: 100",
  "gigglebot.distanceSensorTestForObstacle|param|inequality": "less than or more than, closer than or farther than",
  "gigglebot.driveMillisec": "Will let gigglebot move forward or backward for a number of milliseconds.\nDistance covered during that time is related to the freshness of the batteries.",
  "gigglebot.driveMillisec|param|delay": "for how many milliseconds; eg: 1000",
  "gigglebot.driveMillisec|param|dir": "forward or backward; ",
  "gigglebot.driveStraight": "Will let gigglebot move forward or backward until told otherwise (either by a stop block or a turn block).",
  "gigglebot.driveStraight|param|dir": "forward or backward",
  "gigglebot.followThinLine": "This code allows the Gigglebot to follow a line thin enough to fall between the two sensors. \nThe robot will stop when both of its sensors will detect black.",
  "gigglebot.gigglebotSpin": "Gigglebot will spin on itself until told otherwise, like a turn but staying in the same spot. Especially useful when drawing.",
  "gigglebot.gigglebotSpinMillisec": "Gigglebot will spin on itself for the provided number of milliseconds, like a turn but staying in the same spot. Especially useful when drawing",
  "gigglebot.gigglebotSpinMillisec|param|delay": "how many milliseconds; eg: 1000",
  "gigglebot.gigglebotSpinMillisec|param|turn_dir": "turning left or right",
  "gigglebot.gigglebotSpin|param|turn_dir": "left or right;",
  "gigglebot.leftPower": "return current power setting of the left motor",
  "gigglebot.lightFollow": "Will follow a spotlight shone on its eyes. If the spotlight disappears the gigglebot will stop.",
  "gigglebot.lightReadSensor": "Reads left or right light sensor. \nThe light sensors are placed in front of each eye neopixel, they're tiny! \nThe range is 0 through 1023, although in reality rarely above ~950.",
  "gigglebot.lightReadSensor|param|which": "left or right",
  "gigglebot.lineFollow": "A thin black line would fall between the two sensors. The gigglebot will stop when both sensors are reading black.\nA thick black line would have the two sensors on top of it at all times. The gigglebot will stop when both sensors are reading white.",
  "gigglebot.lineFollow|param|type_of_line": "thin line or thick line",
  "gigglebot.lineReadSensor": "Reads left or right line sensor",
  "gigglebot.lineReadSensor|param|which": "left or right",
  "gigglebot.lineSensorsRaw": "Reads the two line sensors",
  "gigglebot.lineTest": "Will return true if the whole line sensor is reading either black or white.\n@param color: black or white",
  "gigglebot.motorPowerAssign": "Assigns power to a motor, or the same power to both motors\nValues from 101 through 127, and -128 through -101 are used to float the  motor.\n@param motor:  left or right motor, or both\n@param power: a value between -100 and 100",
  "gigglebot.motorPowerAssignBoth": "Assigns potentially different powers to both motors in one call.  \nValues from 101 through 127, and -128 through -101 are used to float the  motor.\n@param left_power: the power to assign to the left motor (between -100 and 100)\n@param right_power: the power to assign to the right motor (between -100 and 100)",
  "gigglebot.motorTrimSet": "This allows the user to correct the motors on the Gigglebot if it's not driving straight\n@param dir: if the gigglebot drives to the left, then correct to the right. Vice versa. \n@param trim_value: a correction value between 0 and 100, but most likely below 10",
  "gigglebot.rightPower": "return current power setting of the right motor",
  "gigglebot.setLeftPower": "Assigns a new power value to the left motor\nValues from 101 through 127, and -128 through -101 are used to float the  motor.",
  "gigglebot.setLeftPower|param|leftpower": "new value for the power setting of the left motor (-100 < leftpower < 100)",
  "gigglebot.setRightPower": "Assigns a new power value to the right motor\nValues from 101 through 127, and -128 through -101 are used to float the  motor.",
  "gigglebot.setRightPower|param|rightpower": "new value for the power setting of the right motor. (-100 < rightpower < 100)",
  "gigglebot.setSpeed": "You can set the speed for each individual motor or both together. The higher the speed the less control the robot has.\nYou may need to correct the robot (see block in \"more...\" section).  A faster robot needs more correction than a slower one.\nIf you want to follow a line,  it will work best at a lower speed.\nActual speed is dependent on the freshness of the batteries.\n@param motor: left, right or both motors\n@param speed: how fast the robot goes.",
  "gigglebot.steer": "Gigglebot will drive forward while steering to one side. \nUseful when it needs to go around an obstacle, or orbit around an object.\n0% means no steering, the same as the 'drive' block. 100% is the same as the 'turn' block.",
  "gigglebot.steerMillisec": "Gigglebot will drive forward while steering to one side for the provided number of milliseconds. \nUseful when it needs to go around an obstacle, or orbit around an object.\n0% means no steering, the same as the 'drive' block. 100% is the same as the 'turn' block.",
  "gigglebot.steerMillisec|param|delay": "for how many milliseconds; eg: 1000",
  "gigglebot.steerMillisec|param|dir": "which direction to steer, left or right",
  "gigglebot.steerMillisec|param|percent": "the variation in power between left and right; eg: 0, 20, 50, 100",
  "gigglebot.steer|param|dir": "to the left or to the right",
  "gigglebot.steer|param|percent": "value between 0 and 100 to control the amount of steering",
  "gigglebot.stop": "stops the robot.",
  "gigglebot.turn": "Will make gigglebot turn left or right until told otherwise (by a stop block or a drive block).",
  "gigglebot.turnMillisec": "Will make gigglebot turn left and right for a number of milliseconds. How far it turns depends on the freshness of the batteries.",
  "gigglebot.turnMillisec|param|delay": "for how many milliseconds; eg: 1000",
  "gigglebot.turnMillisec|param|turn_dir": "turning left or right",
  "gigglebot.voltageShow": "Displays the current battery voltage. Anything lower than 3.4 is too low to run the motors",
  "gigglebotWhichUniqueMotor": "Use this file to define custom functions and blocks.\nRead more at https://makecode.microbit.org/blocks/custom"
}